openapi: 3.0.3
info: { title: Cliplaunch API, version: 1.0.0 }
servers: [ { url: http://localhost:8080 } ]
paths:
  /health:
    get: { summary: Health, responses: { '200': { description: ok } } }

  /v1/wallets/faucet:
    post:
      summary: DEV faucet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { owner: {type:string}, mint:{type:string}, amount:{type:string} }
      responses: { '200': { description: ok } }

  /v1/wallets/bind:
    post:
      summary: Bind wallet owner to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { owner:{type:string}, userId:{type:string, format:uuid} }
      responses: { '200': { description: ok } }

  /v1/orders/build:
    post:
      summary: Build order (preview + persist)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mint: { type: string }
                side: { type: string, enum: [buy, sell] }
                amountIn: { type: string }
                payer: { type: string }
      responses: { '200': { description: ok } }

  /v1/orders/execute:
    post:
      summary: Execute built order (simulated)
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { orderId: { type: string, format: uuid } } }
      responses: { '200': { description: ok } }

  /v1/creators/upsert:
    post:
      summary: Create or update a creator row per user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string, format: uuid }
                handle: { type: string }
                wallet: { type: string }
                bio:    { type: string }
      responses: { '200': { description: ok } }

  /v1/follow:
    post:
      summary: Follow a user
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { follower:{type:string,format:uuid}, followee:{type:string,format:uuid} } }
      responses: { '200': { description: ok } }

  /v1/feed:
    get:
      summary: Home feed by userId or handle
      parameters:
        - in: query; name: userId; schema: { type: string, format: uuid }
        - in: query; name: handle; schema: { type: string }
        - in: query; name: limit;  schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
      responses: { '200': { description: ok } }
